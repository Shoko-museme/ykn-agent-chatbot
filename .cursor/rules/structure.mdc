---
alwaysApply: true
---

# Backend 技术栈与项目结构

该后端是基于 FastAPI 构建的生产级 AI 代理应用。

## 技术栈

- **Web 框架**: [FastAPI](https://fastapi.tiangolo.com/) - 用于构建高性能的异步 API。
- **AI Agent**: [LangGraph](https://python.langchain.com/docs/langgraph/) - 用于构建 AI 代理工作流。
- **LLM 可观测性**: [Langfuse](https://langfuse.com/) - 用于 LLM 的可观测性和监控。
- **数据库**: [PostgreSQL](https://www.postgresql.org/) - 用于数据持久化。
- **监控**: [Prometheus](https://prometheus.io/) & [Grafana](https://grafana.com/) - 用于指标收集和可视化。
- **依赖管理**: `uv` - 一个快速的 Python 包安装器和解析器。
- **认证**: JWT - 基于 JSON Web Token 的身份验证。

## 项目结构

```
├── app/                  # 主要的应用代码
│   ├── main.py           # FastAPI 应用入口
│   ├── api/v1/           # API v1 版本的路由
│   │   ├── api.py
│   │   ├── auth.py       # 认证相关的路由
│   │   └── chatbot.py    # 聊天机器人相关的路由
│   ├── core/             # 核心应用逻辑
│   │   ├── config.py     # 配置管理
│   │   ├── langgraph/    # LangGraph 相关逻辑
│   │   │   └── graph.py  # LangGraph 的主要定义
│   │   ├── limiter.py    # 速率限制
│   │   └── logging.py    # 日志配置
│   ├── models/           # 数据库 ORM 模型
│   ├── schemas/          # Pydantic 数据校验模型
│   ├── services/         # 业务逻辑服务
│   └── utils/            # 工具函数
├── evals/                # 模型评估框架
├── grafana/              # Grafana 仪表盘配置
├── prometheus/           # Prometheus 配置
├── scripts/              # 辅助脚本 (Docker, etc.)
├── Dockerfile            # 后端服务的 Dockerfile
├── docker-compose.yml    # Docker Compose 配置
├── pyproject.toml        # Python 项目依赖 (uv)
└── Makefile              # 包含常用命令的 Makefile
```

## 快速上手

1.  **安装依赖**:
    ```bash
    uv sync
    ```
2.  **启动开发服务器**:
    ```bash
    make dev
    ```